install.packages("KernSmooth")
available.packages()
clear
install.packages("slidify")
install.packages("KernSmooth")
source("http://bioconductor.org/biolite.R")
biocLite()
library(KernSmooth)
find.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
C(z, 555, z)
c(z, 555, z)
z * 2 + 1--
00
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 1000)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?:
help(:)
!':'
!`:`
>`:`
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
2:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0,1,2), each = 10)
class(4)
class(c(4, 'a', TRUE))
x <- c(1,3, 5) and y <- c(3, 2, 10)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x
x <- 1:4
y <- 2:3
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>10]
x[x>10]<-4
x[x>=10]<-4
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>=11]<-4
play()
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
x <- c(4, TRUE)
class(x)
class(4)
x <- list(2, "a", "b", TRUE)
x
x[[2]]
x <- 1:4
y <- 2
x+y
class(x+y)
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x>=11]
x[x>=11]<-4
x
nxt()
num_vect(0.5, 55, -10, 6)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect[num_vect < 1]
tf <- num_vect < 1]
tf <- num_vect < 1
tf
num_vect >= 6
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Clark")
my_name <- c(my_char, "Clark")
my_name
paste(my_name, collapse(" "))
paste(my_name, collapse=" "
)
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
past(LETTERS, 1:4, sept = "-")
paste(LETTERS, 1:4, sept = "-")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3], x[5], x[7])
c(x[[3]], x[[5]], x[[7]])
c(x[3], x[5], x[7])
x[c(x[3], x[5], x[7])]
c(x[x[3], x[5], x[7]])
c(x[x[3]], x[x[5]], x[x[7]]])
c(x[x[3]], x[x[5]], x[x[7]])
x
x
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar =2m, norf = NA)
vect <- c(foo = 11, bar =2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5 )
dim(my_vector)
attributes(my_vector)
my_vectore
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(daata= 1:20, nrow= 4, ncol= 5)
matrix(data= 1:20, nrow= 4, ncol= 5)
my+matrix2 <- matrix(data= 1:20, nrow= 4, ncol= 5)
my_matrix2 <- matrix(data= 1:20, nrow= 4, ncol= 5)
identical(my_matrix, my_matrix2)
c("Bill", "Gina", "Kelly")
patients <- c("Bill", "Gina", "Kelly")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- (c("patient", "age", "weight", "bp", "rating", "test"))
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cname
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE)== FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 !== 7
5 != 7
5 == 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE,
| FALSE)
TRUE & c(TRUE, FALSE,FALSE)
TRUE && c(TRUE,FALSE, FALSE)
TRUE | c(TRUE, FALSE,FALSE)
TRUE || c(TRUE, FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
head(flags)
dim(flags)
class(flags)
cls_list <- lappy(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_list)
lappy(cls_list)
lapply(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flage_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors, n = 6)
head(flag_colors, 6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$populations, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, summary)
tapply(flags$population, flag, summary)
tapply(flags$population, flags, summary)
d
2
flags$population
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replae = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS()
LETTERS
sample(LETTERS, 26)
sample(LETTERS)
sample(c(0,1), 100)
sample(c(0,1), 100, replace=TRUE)
flips <- sample(c(0,1), 100, replace=TRUE, prob(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob= c(0.3, 0.7))
flips
sump(flips)
sum(flips)
?rbinom
rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(100, size=10, prob = 0.7)
flips2 <- rbinom(n = 100, size=10, prob = 0.7)
flips2 <- rbinom(n = 100, size=1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd -25)
rnorm(10, mean = 100, sd =25)
rpois(5, mean = 10)
?rpois
rpois(10)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 < Sys.Data()
d1 <- Sys.Data()
d1 <- Sys.Dat3()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
POSIXct
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t1
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d %H:%M")
t4 < - strptime(t3, "%B %d %H:%M")
t4 <- strptime(t3, "%B %d %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
(Sys.time(), t1, units = 'days')
Sys.time(), t1, units = 'days')
Sys.time(), t1, units = 'days'
difftime(Sys.time(), t1, units = 'days')
swirl()
library(swirl)
swirl()
/
5+7
x <- 5 + 8
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_d
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
(z*2+100)
(z*2+1000)
z*2+1000
my_dive
my_div
mapply(noise, 1:5, 1:5, 2)
mapply(function(n,mean,sd), 1:5, 1:5, 2)
install.packages("dplR")
library(deplr)
library(dplr)
library(dplR)
$dplR
dplR
dplR()
x <- c(1:3)
x
mean(x)
x<- "a"
mean(x)
traceback()
traceback(x)
x<-function(){}
mean(x)
mean(a)
traceback()
debug(x)
x
browse(x)
Browse()
read.csv("no")
debug
debug()
library(datasets)
data(iris)
?iris
Sepal.Length
iris
iris[Sepal.Length]
iris['Sepal.Length']
mean(iris['Sepal.Length'])
Colmean(iris['Sepal.Length'])
ColMean(iris['Sepal.Length'])
colMean(iris['Sepal.Length'])
colmean(iris['Sepal.Length'])
colMeans(iris['Sepal.Length'])
colMeans(iris)
colSums(iris[])
colSums(iris['Sepal.Length'])
colMeans(iris['Sepal.Length'])
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
is.vector(apply(iris[, 1:4], 2, mean))
apply(iris, 2, mean)
apply
?margin
iris[,'Sepal.Length']
iris['virginica','Sepal.Length']
iris['virginica']
iris
iris['Species']
iris$Species
tapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, sum)
tapply(iris$Sepal.Length, iris$Species, mean)
dim(iris)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
let avg4cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "4") |> Seq.averageBy (fun x -> x?hp.AsFloat())
let avg8cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "8") |> Seq.averageBy (fun x -> x?hp.AsFloat())
abs(avg4cyl - avg8cyl)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
x[8]-x[4]
x['8']-x['4']
x$8-x$4
x['8']-x['4']
ls
ls()
debug(ls)
ls
ls()
ls()
debug(ls)
ls()
1
q
q
undebug(ls)
ls
ls()
?debug
Q
Q
Q
Q
Q
Q
Q
Q
undebug(ls)
ls()
$mapply
mapply
?mapply
mapply(1:4, 4:1, mean)
mapply(mean, 1:4, 4:1)
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4, 4:1, SIMPLIFY = FALSE)
rep(1,4)
mapply(rnorm, 1:5, 1:5, 2)
setwd('Desktop/dscience/ProgrammingAssignment2/')
ls
